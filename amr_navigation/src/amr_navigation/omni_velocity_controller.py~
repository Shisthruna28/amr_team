#!/usr/bin/env python

PACKAGE = 'amr_navigation'

import math
from velocity_controller import VelocityController, Velocity
from velocity_controller import get_shortest_angle, get_distance

class OmniVelocityController(VelocityController):

    def __init__(self, l_max_vel, l_tolerance, a_max_vel, a_tolerance):
        self._l_max_vel = l_max_vel
        self._l_tolerance = l_tolerance
        self._a_max_vel = a_max_vel
        self._a_tolerance = a_tolerance


    def compute_velocity(self, actual_pose):
        # Displacement and orientation to the target in world frame:
        dx = self._target_pose.x - actual_pose.x
        dy = self._target_pose.y - actual_pose.y
        # Step 1: compute remaining distances
        linear_dist = get_distance(self._target_pose, actual_pose)
        angular_dist = get_shortest_angle(self._target_pose.theta, actual_pose.theta)
        angular_teta = angular_dist/linear_dist
        linear_theta = get_shortest_angle(math.atan2(dy, dx), actual_pose.theta)

        if (abs(linear_dist)<self._l_tolerance and  abs(angular_dist)<self._a_tolerance):
            self._linear_complete = True
            self._angular_complete = True
            return Velocity()

        if (abs(linear_dist)>self._l_tolerance or self._target_pose.theta != actual_pose.theta) :




            linear_x = math.cos(linear_theta)*self._l_max_vel
            linear_y= math.sin(linear_theta)*self._l_max_vel
            angular_z= self._a_max_vel*angular_teta
            #when large angle is given angular velocity might exceed the max angle _velocity, hence saturating it
            if angular_z > self._a_max_vel:
                return Velocity(linear_x,linear_y,self._a_max_vel)
            else:
                return Velocity(linear_x,linear_y,angular_z)

        else :
            return Velocity(0,0,0)


    """
    ========================= YOUR CODE HERE =========================

    Instructions: put here all the functions that are necessary to
    implement the VelocityController interface. You may
    use the DiffVelocityController as an example.

    Implement the constructor to accept all the necessry parameters
    and implement compute_velocity() method

    You are free to write any helper functions or classes you might
    need.

    ==================================================================

    """
